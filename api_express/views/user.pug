extends template.pug 

block content 
    div(x-data="view();" x-init="await data(); modal=false;" @data-change.camel.window="await data()")

        //
            These are links used for tabs
            Sauce for this is https://talltips.novate.co.uk/tabbed-content-using-alpine-js 
        a(href="#" x-on:click.prevent="tab='#houses'; subtab='houseWrapper'") houses 
        a(href="#" x-on:click.prevent="tab='#tasks'; subtab='taskWrapper'") tasks 
        a(href="#" x-on:click.prevent="tab='#contractors'; subtab='contractorWrapper'") contractors 

        

            
        // This content is tabbed, right?!
        div( x-show='tab=="#houses"' x-data="{editHouse:false}")
            .tabBox
                a(href="#" @click.prevent="subtab='houseWrapper'") All houses
                a(href="#" @click.prevent="subtab='houseDetails'" x-show="house.houseID") House details
                a(href="#" @click.prevent="subtab='form'; editHouse=false;") Form
            #houseWrapper(x-show="subtab=='houseWrapper'")
                h2.contentHeader Houses
                template(x-for="h in houses" :key="h.houseID")
                    div.card(x-bind:id="`house-${h.houseID}`"
                                  @click="house=getHouse(h.houseID); subtab='houseDetails'")
                        .cardInfo
                            h2(x-text="h.address")
                            p(x-text="h.name")
            #houseDetails(x-show="subtab=='houseDetails'" class="detailsView")
                .selectContainer
                    label(for="houseID") Viewing House:
                    select#houseID(@change="house = getHouse($event.target.value); console.log(house);")
                        template(x-for="h in houses")
                            option(x-bind:value="h.houseID" x-text="h.address") 
                        option(selected="" hidden="") ---
                .detailsBody()
                    h2(x-text="house.address")
                    p
                        b Name: 
                        span(x-text="house.name")
                    p
                        b Description: 
                        span(x-text="house.description")
                    p 
                        b ID: #
                        span(x-text="house.houseID")
                    p
                        b Created at: 
                        span(x-text="new Date(house.created_at).toLocaleString()")
                    p 
                        b Last updated: 
                        span(x-text="new Date(house.last_edited).toLocaleString()")

                    p
                        b Tasks: 
                            span(x-text="`(${house.tasks.length}) `")
                            span(x-show="house.tasks.length" @click="tab='#tasks'; subtab='taskWrapper'; selected_house_id=house.houseID; filteredTasks = tasks.filter(t=>t.houseID==selected_house_id);") Show
                    .buttonBox(style="width:100%;")
                        button(@click="modal='deleteHouse'")
                            span.material-icons delete
                        button(@click="subtab='form'; editHouse=true;")
                            span.material-icons edit
            #houseForm(x-show="subtab=='form'" )
                h2.contentHeader(x-text="editHouse? `Update House (#${house.houseID})` : 'Create House'")
                form(action="/house", id="houseForm" method="post" 
                @submit.prevent="selected_house_id = await alterHouse($event.target, editHouse); subtab='houseDetails'; house=getHouse(selected_house_id);")
                    .labelContainer
                        label(for="houseAddress") Address:
                        input#houseAddress(type="text", name="address", required="" placeholder="Address", x-bind:value="editHouse? house.address : ''")
                    .labelContainer
                        label(for="houseDescription") Description (Optional):
                        input#houseDescription(type="text", name="description" placeholder="Description" x-bind:value="editHouse? house.description :''")
                    .labelContainer
                        label(for="houseName") Name (Optional):
                        input#houseName(type="text", name="name", placeholder="Name" x-bind:value="editHouse? house.name : ''")
                    input(type="hidden", name="houseID", x-bind:value="editHouse? house.houseID : ''")
                    input(type="submit" x-bind:value="editHouse? 'Save' : 'Create'")
        
        div(x-show="tab=='#tasks'" x-data= "{editTask:false, filterGroup:'tasks', filterID:''}")
            .tabBox 
                a(href="#" @click.prevent="subtab='taskWrapper'") All tasks
                a(href="#" @click.prevent="subtab='taskDetails'" x-show="task.taskID") Task Details
                a(href="#" @click.prevent="subtab='form'; editTask=false;") Form

            #taskWrapper(x-show="subtab=='taskWrapper'")
                h2.contentHeader Tasks
                .selectContainer
                    label(for="showSelection") Showing:
                    select#showSelection(name="filteringType" x-model="filterGroup" @change="filteredTasks = filterTasksBy(filterGroup, filterID)")
                        option(value="tasks" selected="") Tasks
                        option(value="suggestions") Suggestions
                    .selectContainer
                        label(for="taskFilter") Filter by house:
                        select#taskFilter(name="filterID" x-model="filterID" @change="filteredTasks=filterTasksBy(filterGroup, filterID)")
                            option(value="" selected="") Any
                            template(x-for="h in houses")
                                option(x-bind:value="h.houseID" x-text="h.address" x-bind:selected="h.houseID == selected_house_id")
                    
                             

                template(x-for="t in filteredTasks;" :key="t.taskID")
                    .card(x-bind:id="`task-${t.taskID}`" @click="task= await getTask(t.taskID);subtab='taskDetails'; console.log(task)")
                        .cardInfo
                            h2
                                span(x-show="filterGroup=='tasks';") Task #
                                span(x-show="filterGroup=='suggestions';") Suggestion #
                                span(x-text="t.taskID")
                            p(x-text="t.description")


                

                .card(x-show="!filteredTasks.length" @click="subtab='form'; editTask=false;")
                    .cardInfo
                        h2 No tasks!
                        p Pick another filter, or click here to create a task for your house!

            #taskDetails(x-show="subtab=='taskDetails'" class="detailsView")
                .selectContainer
                    label(for="groupFilter") Showing:
                    select#groupFilter(name="" x-model="filterGroup" @change="filteredTasks=filterTasksBy(filterGroup, '')")
                        option(value="tasks" selected="") Tasks
                        option(value="suggestions") Suggestions
                    .selectContainer
                        label(for="taskID") Viewing Task:
                        select#taskID(name="taskID" @change="task= await getTask($event.target.value); console.log(task)")
                            option(selected="" hidden="") ---
                            template(x-for="t in filteredTasks;" :key="t.taskID")
                                option(x-bind:value="t.taskID" x-text="`Task #${t.taskID}`")
                .detailsBody()
                    h2 
                        span(x-show="filterGroup=='tasks'") Task: #
                        span(x-show="filterGroup=='suggestions'") Suggestion: #
                        span(x-text="task.taskID")
                    p 
                        b Description: 
                        span(x-text="task.description")
                    p 
                        b Address: 
                        span(x-text="task.houseID ? houses.find(h=>h.houseID == task.houseID).address : 'no address' ")
                    p
                        b HouseID: 
                        span(x-text="task.houseID")
                    p
                        b Created at: 
                        span(x-text="new Date(task.created_at).toLocaleString()")
                    p 
                        b Last updated: 
                        span(x-text="new Date(task.last_edited).toLocaleString()")
                    p 
                        b Contractors invited: 
                        span(x-text="`(${task.contractors.length}) `")
                        span(x-show="task.contractors.length" @click="tab='#contractors'; alert('implement contractor task-filter');") Show
                    .buttonBox(style="width:100%;")
                        button(@click="modal='deleteTask'" x-show="filterGroup=='tasks'")
                            span.material-icons delete
                        button(@click="modal='rejectSuggestion'" x-show="filterGroup=='suggestions'")
                            span.material-icons close
                        button(@click="subtab='form'; editTask=true; selected_house_id=task.houseID;" x-show="filterGroup=='tasks'")
                            span.material-icons edit
                        button(@click="modal='taskInvite'" x-show="filterGroup=='tasks'")
                            span.material-icons person_add
                        button(@click="modal='approveSuggestion'" x-show="filterGroup=='suggestions'")
                            span.material-icons check 

                    
            #taskForm(x-show="subtab=='form';" x-data="{selectedHouse:''}")
                h2.contentHeader(x-text="editTask? `Update Task (#${task.taskID})` : 'Create Task'")
                .selectContainer 
                    label(for="houseID_task") For house:
                    select#houseID_task(name="houseID" form="taskForm" @change="console.log($event.target.value)"
                    x-model="selectedHouse")
                        template(x-for="h in houses")
                            option(x-bind:value="h.houseID" x-text="`${h.address}(#${h.houseID})`" x-bind:selected="h.houseID == selected_house_id")
                        option(value=false selected="" hidden="") ---    
                form(action="/task", id="taskForm" method="post" 
                @submit.prevent="await alterTask($event.target, editTask); subtab='taskDetails'; ")
                    .labelContainer
                        label(for="taskDescription") Description:   
                        input#taskDescription(type="text", name="description" required="" placeholder="Description" x-bind:value="editTask? task.description :''")
                    input(type="hidden", name="taskID", x-bind:value="editTask? task.taskID : ''")
                    input(type="hidden" name="houseID" x-bind:value="selectedHouse")
                    input(type="submit" x-bind:value="editTask ? 'Save' : 'Create'")

        div(x-show="tab=='#contractors'" x-data="{editContractor:false}")

            .tabBox
                a(href="#" @click.prevent="subtab='contractorWrapper'") All Contractors
                a(href="#" @click.prevent="subtab='contractorDetails';" x-show="contractor.contractorID") Contractor Details
                a(href="#" @click.prevent="subtab='form'; editContractor=false;") Form
            
            #contractorWrapper(x-show="subtab=='contractorWrapper';")
                h2.contenHeader Contractors
                template(x-for="c in contractors;" :key="c.contractorID")
                    .card(x-bind:id="`contractor-${c.contractorID}`" @click="contractor = await getContractor(c.contractorID); console.log(contractor); subtab='contractorDetails'")
                        .cardInfo 
                            h2(x-text="c.name")
                            p(x-text="c.phone")

            #contractorDetails(x-show="subtab=='contractorDetails';" class="detailsView")
                .selectContainer
                    label(for="contractorID") Showing Contractor: 
                    select#contractorID(name="contractorID" @change="contractor = await getContractor($event.target.value); console.log(contractor);")
                        option(selected="" hidden="") --- 
                        template(x-for="c in contractors" :key="c.contractorID")
                            option(x-bind:value="c.contractorID" x-text="`${c.name} (${c.occupation})`")
                .detailsBody()
                    h2(x-text="contractor.name")
                    p 
                        b Occupation: 
                        span(x-text="contractor.occupation")
                    p 
                        b Phone: 
                        span(x-text="contractor.phone")
                    p 
                        b Email: 
                        span(x-text="contractor.email")
                    p 
                        b Suggestions created: 
                        span(x-text="`(${contractor.suggestions.length})`")
                    .buttonBox()
                        button(@click="modal='deleteContractor'")
                            span.material-icons person_remove
                        button(@click="subtab='form'; editContractor=true;")
                            span.material-icons edit
                    
            #contractorForm(x-show="subtab=='form'")
                h2.contentHeader(x-text="editContractor? 'Update Contractor' : 'New Contractor'")
                form(action="/contractor", @submit.prevent="await alterContractor($event.target, editContractor); subtab='detailsView'")
                    .labelContainer
                        label(for="contractorName") Name: 
                        input#contractorName(type="text", name="name", placeholder="Name" required="" x-bind:value="editContractor? contractor.name : ''")
                    .labelContainer
                        label(for="contractorEmail") Email: 
                        input#contractorEmail(type="email", name="email", placeholder="Email" required="" x-bind:value="editContractor? contractor.email : ''")
                    .labelContainer
                        label(for="contractorPhone") Phone: 
                        input#contractorPhone(type="phone", name="phone", placeholder="Phone" required="" x-bind:value="editContractor? contractor.phone : ''")
                    .labelContainer
                        label(for="contractorOccupation") Occupation:  
                        input#contractorOccupation(type="text", name="occupation", placeholder="Occupation", required="" x-bind:value="editContractor? contractor.occupation : ''")
                    input(type="hidden" name="contractorID", x-bind:value="editContractor? contractor.contractorID : ''")
                    input(type="submit", x-bind:value="editContractor? 'Save' : 'Create contractor'")
        
        .modalContainer(x-show="modal")
            .confirmModal(x-show="modal=='deleteHouse'")
                h2.contentHeader Delete house
                    span(x-text="`(#${house.houseID})`")
                p.confirmContent Are you sure you want to delete this house
                .buttonBox(style="width:90%; margin-left:auto; margin-right:auto;")
                    button.destroyButton(@click="await destroy('house', house.houseID); modal=false; subtab='houseWrapper';") Yes
                    button.cancelButton(@click="modal=false;") No

            .confirmModal(x-show="modal=='deleteTask'")
                h2.contentHeader Delete Task
                    span(x-text="`(${task.taskID})`")
                p.confirmContent Are you sure you want to delete this task
                .buttonBox(style="width:90%; margin-left:auto; margin-right:auto;")
                    button.destroyButton(@click="await destroy('task', task.taskID); modal=false; subtab='taskWrapper';") Yes
                    button.cancelButton(@click="modal=false;") No
            .modal(x-show="modal=='taskInvite'" x-data="{appointee:''}")
                h2.contentHeader Invite To Task
                .selectContainer
                    label(for="contractorInvite") Contractor
                    select#contractorInvite(name="contractorId" form="inviteForm" x-model="appointee")
                        template(x-for="c in contractors")
                            option(x-bind:value="c.contractorID" x-text="c.name")
                    .buttonBox(style="width:90%; margin-left:auto; margin-right:auto;")
                        button.confirmButton(@click="await inviteContractor(appointee,task.taskID); modal=false;") Invite
                        button.cancelButton(@click="modal=false;") Cancel

            .confirmModal(x-show="modal=='rejectSuggestion'")
                h2.contentHeader Reject Suggestion
                    span(x-text="`(#${task.taskID})`")
                p.confirmContent Are you sure you want to reject this task
                .buttonBox(style="width:90%; margin-left:auto; margin-right:auto;")
                    button.destroyButton(@click="await destroy('task/suggestion', task.taskID); modal=false; subtab='taskWrapper';") Yes
                    button.cancelButton(@click="modal=false;") No
            .confirmModal(x-show="modal=='approveSuggestion'")
                h2.contentHeader Approve Suggestion
                    span(x-text="`(#${task.taskID})`")
                p.confirmContent Are you sure you want to approve this task, elevating it to a regular task?
                .buttonBox(style="width:90%; margin-left:auto; margin-right:auto;")
                    button.confirmButton(@click="await destroy('task/suggestion', task.taskID); modal=false; subtab='taskWrapper';") Yes
                    button.cancelButton(@click="modal=false;") No
            
            .confirmModal(x-show="modal=='deleteContractor'")
                h2.contentHeader Delete Contractor
                p.confirmContent Are you sure you want to delete this user?
                .buttonBox(style="90%; margin-left:auto; margin-right:auto;")
                    button.destroyButton(@click="await destroy('contractor', contractor.contractorID); modal=false; subtab='contractorWrapper';") Yes
                    button.cancelButton(@click="modal=false;") No
                
        script
            include scripts/user.js
            