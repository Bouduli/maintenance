extends template.pug 

block content 
    div(x-data="view();" @data-change.camel.window="await data()")

        //
            These are links used for tabs
            Sauce for this is https://talltips.novate.co.uk/tabbed-content-using-alpine-js 
        a(href="#" x-on:click.prevent="tab='#houses'") houses 
        //- a(href="#" x-on:click.prevent="tab='#tasks'") tasks 
        a(href="#" x-on:click.prevent="tab='#contractors'") contractors 
        
        
        div(id="houseTab" x-show='tab=="#houses"' x-data="{alterHouseModal:false, editHouse:false}"
            x-init = "await fetchHouses(); await fetchTasks(); await fetchContractors(); console.log('houses: ', houses); console.log('tasks: ', tasks); console.log('contractors:', contractors)")
            div.modalContainer( x-show="house.houseID"
                    @click="house = {tasks:[]}")
                div.modal(x-data="{expandTasks:true}"
                    x-show="house.houseID"
                    style="border: 3px dashed red;"
                    @click.stop="" )
                    //- click.stop prevents the click event of outer div, from firing inside this one.
                        hence, the modal can be clicked, withot immediately closing the modal.
                    button.closeButton(@click="house = {tasks:[]}") X
                    .houseInfo(x-data="{expandInfo:false, showDestroyModal:false, showHouseEdit:false}")
                        h2(x-text="house.address")
                        p(x-text="house.name")
                        p(x-text="house.description")
                        div.houseInfo(x-show="expandInfo" x-collapse="")
                            p ID: #
                                span(x-text="house.houseID")
                            p Created at: 
                                        span(x-text="new Date(house.created_at).toLocaleString()")
                            p Last updated: 
                                span(x-text="new Date(house.last_edited).toLocaleString()")
                            .buttonBox
                                button(@click="showDestroyModal=!showDestroyModal")
                                    span.material-icons delete
                                button(@click="alterHouseModal=true; editHouse=true;")
                                    span.material-icons edit_square
                            .modalContainer(x-show="showDestroyModal")
                                .confirmModal
                                    h2.contentHeader Delete?
                                    .confirmContent
                                        p Are you sure you want to delete the house
                                    .buttonBox2
                                        button.destroyButton(@click="await destroy('house', house.houseID); showDestroyModal=false; house = {tasks:[]}") Yes
                                        button.cancelButton(@click="showDestroyModal=false") Cancel
                            
                        button#expandInfoButton(@click="expandInfo=!expandInfo")
                            span.material-icons expand_more
                    h3 Tasks:  
                        span(x-show="!house.tasks.length") No tasks
                    div(id="taskWrapper" x-show="expandTasks" x-collapse="")
                        template(x-for="t in house.tasks" :key="t.taskID")
                            div.card(x-bind:id="`task${t.taskID}`"
                                     x-data="{showTaskDetails:false, showDestroyTask:false}")
                                p TaskID: 
                                    span(x-text="t.taskID")
                                p Description: 
                                    span(x-text ="t.description")
                                p Completed: 
                                    span(x-text="t.completed?'YES': 'NO'")
                                .buttonBox
                                    button(@click="showDestroyTask=!showDestroyTask")
                                        span.material-icons delete
                                    button(@click="showTaskDetails = !showTaskDetails") show details
                                .modalContainer(x-show="showDestroyTask")
                                    .confirmModal
                                        h2.contentHeader Delete Task?
                                        p.confirmContent Are you sure you want to delete this task 
                                            span(x-text="`(TaskID: ${t.taskID})`")
                                        .buttonBox2
                                            button.destroyButton(@click="await destroy('task', t.taskID, $event.target); showDestroyTask=false;") Yes
                                            button.cancelButton(@click="showDestroyTask=false;") No

                                div.extendedInfo(x-show="showTaskDetails" x-collapse="" class="taskDetails" x-data="{showAppointees:false}")
                                    p Created at:
                                        span(x-text="new Date(t.created_at).toLocaleString()")
                                    h4 Appointees: 
                                        span(x-text="`[${t.contractors.length}] `")
                                        span(x-show="t.contractors.length" @click="showAppointees=!showAppointees") show
                                    div(class="appointeeWrapper" x-show="showAppointees")
                                        template(x-for="c in t.contractors" :key="c.contractorID")
                                            div(class="appointeeItem")
                                                p
                                                    span(x-text="c.name")
                                                    span  
                                                    span(x-text="`(${c.occupation})`")
                                                p phone: 
                                                    span(x-text="c.phone")
                                                p email: 
                                                    span(x-text="c.email")
                                    //------------> THIS CODE SOMEHOW BROKE <--------------
                                    //- div(class="inviteAppointee")
                                    //-     h4 Invite:
                                    //-     label(for="contractorMail") contractor: 
                                    //-     select(name="email" id="contractorMail" form="inviteform")
                                    //-         template(x-for="c in contractors" :key="c.contractorID")
                                    //-             option(x-bind:value="c.email" x-text="`${c.name} (${c.occupation})`")
                                    //-     form(id="inviteform" @submit.prevent="await inviteContractor($event.target)")
                                    //-         input(type="hidden", name="taskID" x-bind:value="t.taskID", value="")
                                    //-         input(type="submit", value="Invite")
                                    
                                    //- -----------> CHAT GPT HALLUCINATED SOLUTION <---------------
                                    div(class="inviteAppointee" x-data="{selectedEmail:'', derivedtaskID:''}")
                                        h4 Invite:
                                        .labelWrapper
                                            label(for="contractorMail") contractor: 
                                            select(name="email" id="contractorMail" form="inviteForm" x-model="selectedEmail")
                                                template(x-for="c in contractors" :key="c.contractorID")
                                                    option(x-bind:value="c.email" x-text="`${c.name} (${c.occupation})`")
                                        form(id="inviteForm" @submit.prevent="await inviteContractor(selectedEmail,$event.target.taskID.value)")
                                            input(type="hidden", name="taskID" x-bind:value="t.taskID")
                                            input(type="submit", value="Invite")
                    //- if shownTasks has a value, it means click should change it to the length of arrays, 
                        so that the entire array is displayed (slice(0, arr.length) returns whole array), otherwise set it to 1
                    button(x-show="house.tasks.length" @click="expandTasks=!expandTasks") Show More
                    //- if a user is in the house-view, button that opens the create-form is visible
                    h4(x-show="tab=='#houses'") Create another task: 
                        span(@click="tab='#tasks'") show form
                    //- Otherwise there's a back-button
                    h4(x-show="tab=='#tasks'" @click="tab='#houses'") Go back
            h2.contentHeader HOUSES
            .houseInfo(@click=" editHouse=false; alterHouseModal=!alterHouseModal;")
                h2 Create Another House 
                    span.material-icons(class="linkIcon") launch
            .modalContainer(x-show="alterHouseModal" id="alterHouseModal")
                .modal 
                    button.closeButton(@click="alterHouseModal = false;") X
                    h2.contentHeader(x-text="editHouse? 'UPDATE HOUSE' : 'CREATE HOUSE'")
                    form(action="/house", id="houseForm" method="post" 
                    @submit.prevent=" await alterHouse($event.target, editHouse); alterHouseModal = false;")
                        input(type="text", name="address", placeholder="Address", x-bind:value="house.address || ''")
                        input(type="text", name="description" placeholder="Description" x-bind:value="house.description || ''")
                        input(type="text", name="name", placeholder="Name" x-bind:value="house.name || ''")
                        input(type="hidden", name="houseID", x-bind:value="house.houseID")
                        input(type="submit" value="create")
            h2 Your houses
            div(id="houseWrapper")
                template(x-for="h in houses" :key="h.houseID")
                    div.houseCard(x-bind:id="`house-${h.houseID}`"
                                  @click="h.tasks = tasks.filter(t=>t.houseID == h.houseID); house = h; console.log('selected house: ', house)")
                        .houseInfo
                            h2(x-text="h.address")
                            p(x-text="h.name")
                        //- a(href="#" @click.prevent="house=h.houseID; window.dispatchEvent(showHouseEvent)") open
            
        div(x-show="tab=='#tasks'")
            .labelWrapper
                label(for="houseID") House: 
                //- When a house is selected, it's tasks must be assigned by filtering tasks for matching houseIDs
                select(name="houseID" id="houseID" form="taskform"
                    @change="house = houses.find(h=>h.houseID == $event.target.value) || {tasks:[]}; house.tasks = tasks.filter(t=>t.houseID == house.houseID);")
                    template(x-for="h in houses")
                        option(x-bind:value="h.houseID" x-text="h.address" x-bind:selected="h.houseID == house.houseID")  
            form(id="taskform", @submit.prevent="await createTask($event.target)")
                .labelWrapper
                    label(for="taskDescription") Task description:
                    input(id="taskDescription" type="text", name="description" placeholder="Description" required)
                input(type="submit" value="create")
                

        div(id ="contractorTab" x-show="tab=='#contractors'" x-data="{contractors: []}", x-init="await fetchContractors()")
            h2.contentHeader CONTRACTORS
            div(id="createContractor")
                h3 add contractor 
                form(action="/contractor", method="post", @submit.prevent="await createContractor($event.target)")
                    input(type="text", name="name", placeholder="Name", required)
                    input(type="email", name="email", placeholder="Email", required)
                    input(type="phone", name="phone", placeholder="Phone", required)
                    input(type="text", name="occupation", placeholder="Occupation", required)
                    input(type="submit", value="Create contractor")
            ul
                template(x-for="contractor in contractors" :key="contractor.contractorID")
                    div(:id="$id('contractor.contractorId')")
                        h3 name: 
                            span(x-text="contractor.name")
                        i occupation: 
                            span(x-text="contractor.occupation")
                        p phone: 
                            span(x-text="contractor.phone")

                        button(@click="await destroy('contractor', contractor.contractorID, $event.target)") DELETE CONTRACTOR

        script
            include scripts/user.js
            